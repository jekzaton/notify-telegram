const express = require('express');
const cron = require('node-cron');
const db = require('./db');
const sendTelegram = require('./sendTelegram');
require('dotenv').config();

const app = express();
const PORT = 3000;

// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö booking_id ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö real-time)
let lastBookingId = 0;

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô d-m-yyyy ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ó‡∏¢
function formatThaiDMY(isoDateStr) {
  const date = new Date(isoDateStr);
  const day = date.getDate();
  const month = String(date.getMonth() + 1);
  const year = date.getFullYear();
  return `${day}-${month}-${year}`;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏≤‡∏ß‡∏±‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö yyyy-mm-dd ‡πÅ‡∏ö‡∏ö ‡∏û.‡∏®.
function getTodayInThaiDate() {
  const today = new Date();
  const yyyy = today.getFullYear() + 543; // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô ‡∏û.‡∏®.
  const mm = String(today.getMonth() + 1).padStart(2, '0');
  const dd = String(today.getDate()).padStart(2, '0');
  return `${yyyy}-${mm}-${dd}`;
}

// ‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏ö‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ß‡∏•‡∏≤ (‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ)
async function checkBookingAndNotify() {
  try {
    const todayStr = getTodayInThaiDate();
    const [rows] = await db.query(`
      SELECT b.booking_id, r.name as roomName, u.name, b.subject,
             b.startDate, b.endDate, b.startTime, b.endTime
      FROM prefix_r_bookings b
      LEFT JOIN prefix_r_room r ON r.room_id = b.room_id
      LEFT JOIN opduser u on u.loginname = b.organization_id
      WHERE b.startDate = ? AND b.endTime >= CURRENT_TIME
    `, [todayStr]);

    if (rows.length > 0) {
      let message = `üì¢ ‡∏û‡∏ö ${rows.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${formatThaiDMY(todayStr)}:\n\n`;

      rows.forEach((row, i) => {
        message += `üìå ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà ${i + 1}
üìù ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á: ${row.subject}
üè¢ ‡∏´‡πâ‡∏≠‡∏á: ${row.roomName}
üïí ‡πÄ‡∏ß‡∏•‡∏≤: ${row.startTime} ‡∏ô. - ${row.endTime} ‡∏ô.
üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${formatThaiDMY(row.startDate)} ‡∏ñ‡∏∂‡∏á ${formatThaiDMY(row.endDate)}
üë§ ‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á: ${row.name}

`;
      });

      await sendTelegram(message);
    }

  } catch (err) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô checkBookingAndNotify:', err);
  }
}

// ‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏ö‡∏ö Real-time (‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ booking_id ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà)
async function watchNewBookings() {
  try {
    const [rows] = await db.query(`
      SELECT b.booking_id, r.name as roomName, u.name, b.subject,
             b.startDate, b.endDate, b.startTime, b.endTime
      FROM prefix_r_bookings b
      LEFT JOIN prefix_r_room r ON r.room_id = b.room_id
      LEFT JOIN opduser u on u.loginname = b.organization_id
      WHERE b.booking_id > ?
      ORDER BY b.booking_id ASC
    `, [lastBookingId]);

    if (rows.length > 0) {
      for (const row of rows) {
        const message = `üìå ‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà!
üìù ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á: ${row.subject}
üè¢ ‡∏´‡πâ‡∏≠‡∏á: ${row.roomName}
üïí ‡πÄ‡∏ß‡∏•‡∏≤: ${row.startTime} ‡∏ô. - ${row.endTime} ‡∏ô.
üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${formatThaiDMY(row.startDate)} ‡∏ñ‡∏∂‡∏á ${formatThaiDMY(row.endDate)}
üë§ ‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á: ${row.name}`;
        await sendTelegram(message);
        lastBookingId = row.booking_id;
      }
    }

  } catch (err) {
    console.error('‚ùå watchNewBookings error:', err);
  }
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î booking_id ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
async function initLastBookingId() {
  try {
    const [rows] = await db.query('SELECT MAX(booking_id) as maxId FROM prefix_r_bookings');
    lastBookingId = rows[0].maxId || 0;
    console.log('üîÅ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å booking_id ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:', lastBookingId);
  } catch (err) {
    console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î booking_id ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:', err);
  }
}

// ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô
cron.schedule('0 8 * * *', () => {
  console.log('üîî ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≠‡∏ô 08:00');
  checkBookingAndNotify();
});
cron.schedule('30 12 * * *', () => {
  console.log('üîî ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≠‡∏ô 12:30');
  checkBookingAndNotify();
});

// ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö manual
app.get('/check', async (req, res) => {
  await checkBookingAndNotify();
  res.json({ message: 'Checked and notified (manual)' });
});

// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
app.listen(PORT, async () => {
  console.log(`‚úÖ Server running on http://localhost:${PORT}`);
  await initLastBookingId();             // ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤ booking_id ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
  setInterval(watchNewBookings, 5000);   // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
});
